"use strict";!function(angular,Blockly){if(!angular.isDefined(Blockly))throw new Error("You must include 'The Blockly Library' before angular-blockly");angular.module("angular-blockly",[]).provider("ngBlockly",["EmptyToolbox",function(EmptyToolbox){var defaultOptions={trashcan:!0,sounds:!1,toolbox:EmptyToolbox()},options={};this.options=function(opt,value){angular.isObject(opt)&&(options=angular.extend({},opt)),angular.isDefined(opt)&&angular.isDefined(value)&&(options[opt]=value),angular.isArray(opt)&&angular.forEach(opt,function(oopt,key){options[key]=oopt})},this.$get=function(){var locals=angular.extend({},defaultOptions,options);return{getOptions:function(){return locals}}}}]).service("BlocklyService",["$timeout","Blockly",function($timeout,Blockly){this.getWorkspace=function(){return Blockly.getMainWorkspace()},this.setToolbox=function(toolbox){this.getWorkspace().updateToolbox(toolbox)}}]).directive("ngBlockly",["ngBlockly","Blockly","BlocklyService","BlocklyToolbox","LogicToolbox","$timeout",function(ngBlockly,Blockly,BlocklyService,BlocklyToolbox,LogicToolbox,$timeout){return{restrict:"E",scope:{options:"="},template:'<div style="height:500px" class="ng-blockly"></div>',controller:[function(){}],link:function($scope,$element,attrs){var opts=angular.extend({},$scope.options||{},ngBlockly.getOptions());console.dir(opts),$timeout(function(){Blockly.inject($element.children()[0],opts),BlocklyService.setToolbox(LogicToolbox())},100)}}}]).constant("Blockly",Blockly).constant("EmptyToolbox",function(){var toolboxXml=["<xml >",'<category id="catLogic" name="Empty">',"</category>","</xml>"];return toolboxXml.join("")}).constant("LogicToolbox",function(){var toolboxXml=["<xml >",'<category id="catLogic" name="Logic">','<block type="controls_if">',"</block>","</category>","</xml>"];return toolboxXml.join("")}).constant("BlocklyToolbox",function(){var toolboxXml='<xml>  <sep></sep>  <category id="catLogic" name="Logic">    <block type="controls_if"></block>    <block type="logic_compare"></block>    <block type="logic_operation"></block>    <block type="logic_negate"></block>    <block type="logic_boolean"></block>    <block type="logic_null"></block>    <block type="logic_ternary"></block>  </category>  <sep></sep>  <category id="catLoops" name="Loops">    <block type="controls_repeat_ext">      <value name="TIMES">        <block type="math_number">          <field name="NUM">10</field>        </block>      </value>    </block>    <block type="controls_whileUntil"></block>    <block type="controls_for">      <value name="FROM">        <block type="math_number">          <field name="NUM">1</field>        </block>      </value>      <value name="TO">        <block type="math_number">          <field name="NUM">10</field>        </block>      </value>      <value name="BY">        <block type="math_number">          <field name="NUM">1</field>        </block>      </value>    </block>    <block type="controls_flow_statements"></block>  </category>  <sep></sep>  <category id="catMath" name="Math">    <block type="math_number"></block>    <block type="math_arithmetic"></block>    <block type="math_single"></block>    <block type="math_trig"></block>    <block type="math_constant"></block>    <block type="math_number_property"></block>    <block type="math_change">      <value name="DELTA">        <block type="math_number">          <field name="NUM">1</field>        </block>      </value>    </block>    <block type="math_round"></block>    <block type="math_modulo"></block>    <block type="math_constrain">      <value name="LOW">        <block type="math_number">          <field name="NUM">1</field>        </block>      </value>      <value name="HIGH">        <block type="math_number">          <field name="NUM">100</field>        </block>      </value>    </block>    <block type="math_random_int">      <value name="FROM">        <block type="math_number">          <field name="NUM">1</field>        </block>      </value>      <value name="TO">        <block type="math_number">          <field name="NUM">100</field>        </block>      </value>    </block>    <block type="math_random_float"></block>    <block type="base_map"></block>  </category>  <sep></sep>  <category id="catText" name="Text">    <block type="text"></block>    <block type="text_join"></block>    <block type="text_append">      <value name="TEXT">        <block type="text"></block>      </value>    </block>    <block type="text_length"></block>    <block type="text_isEmpty"></block>  </category>  <sep></sep>  <category id="catVariables" name="Variables">    <block type="variables_get"></block>    <block type="variables_set"></block>    <block type="variables_set">      <value name="VALUE">        <block type="variables_set_type"></block>      </value>    </block>    <block type="variables_set_type"></block>  </category>  <sep></sep>  <category id="catFunctions" name="Functions" custom="PROCEDURE"></category>  <sep></sep>  <category id="catInputOutput" name="Input/Output">    <block type="io_digitalwrite">      <value name="STATE">        <block type="io_highlow"></block>      </value>    </block>    <block type="io_digitalread"></block>    <block type="io_builtin_led">      <value name="STATE">        <block type="io_highlow"></block>      </value>    </block>    <block type="io_analogwrite"></block>    <block type="io_analogread"></block>    <block type="io_highlow"></block>    <block type="io_pulsein">      <value name="PULSETYPE">        <shadow type="io_highlow"></shadow>      </value>    </block>    <block type="io_pulsetimeout">      <value name="PULSETYPE">        <shadow type="io_highlow"></shadow>      </value>      <value name="TIMEOUT">        <block type="math_number"></block>      </value>    </block>  </category>  <sep></sep>  <category id="catTime" name="Time">    <block type="time_delay">      <value name="DELAY_TIME_MILI">        <block type="math_number">          <field name="NUM">1000</field>        </block>      </value>    </block>    <block type="time_delaymicros">      <value name="DELAY_TIME_MICRO">        <block type="math_number">          <field name="NUM">100</field>        </block>      </value>    </block>    <block type="time_millis"></block>    <block type="time_micros"></block>    <block type="infinite_loop"></block>  </category>  <sep></sep>  <category id="catAudio" name="Audio">    <block type="io_tone">      <field name="TONEPIN">0</field>      <value name="FREQUENCY">        <shadow type="math_number">          <field name="NUM">220</field>        </shadow>      </value>    </block>    <block type="io_notone"></block>  </category>  <sep></sep>  <category id="catMotors" name="Motors">    <block type="servo_write">      <value name="SERVO_ANGLE">        <block type="math_number">          <field name="NUM">90</field>        </block>      </value>    </block>    <block type="servo_read"></block>    <block type="stepper_config">      <field name="STEPPER_PIN1">1</field>      <field name="STEPPER_PIN2">2</field>      <value name="STEPPER_STEPS">        <block type="math_number">          <field name="NUM">100</field>        </block>      </value>      <value name="STEPPER_SPEED">        <block type="math_number">          <field name="NUM">10</field>        </block>      </value>    </block>    <block type="stepper_step">      <value name="STEPPER_STEPS">        <block type="math_number">          <field name="NUM">10</field>        </block>      </value>    </block>  </category>  <sep></sep>  <category id="catComms" name="Comms">    <block type="serial_setup"></block>    <block type="serial_print"></block>    <block type="text_prompt_ext">      <value name="TEXT">        <block type="text"></block>      </value>    </block>    <block type="spi_setup"></block>    <block type="spi_transfer"></block>    <block type="spi_transfer_return"></block>  </category></xml>';return Blockly.Xml.textToDom(toolboxXml)})}(angular,Blockly);