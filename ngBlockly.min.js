"use strict";!function(angular,Blockly,X2JS){if(!angular.isDefined(Blockly))throw new Error("You must include 'The Blockly Library' before angular-blockly");if(!angular.isDefined(X2JS))throw new Error("You must include 'The X2JS Library' before angular-blockly");angular.module("angular-blockly",["ngAnimate","ng-lodash"]).provider("ngBlockly",["EmptyToolbox",function(EmptyToolbox){var defaultOptions={css:!0,trashcan:!0,sounds:!1,scrollbars:!0,disable:!0,grid:!1,maxBlocks:1/0,toolbox:EmptyToolbox()},options={};this.options=function(opt,value){angular.isObject(opt)&&(options=angular.extend({},opt)),angular.isDefined(opt)&&angular.isDefined(value)&&(options[opt]=value),angular.isArray(opt)&&angular.forEach(opt,function(oopt,key){options[key]=oopt})},this.$get=function(){var locals=angular.extend({},defaultOptions,options);return{getOptions:function(){return locals}}}}]).service("BlocklyService",["$timeout","Blockly","$rootScope",function($timeout,Blockly,$rootScope){this.getWorkspace=function(){return Blockly.getMainWorkspace()},this.setToolbox=function(toolbox){this.getWorkspace().updateToolbox(toolbox),console.dir(this.getToolbox()),$rootScope.$broadcast("BLOCKLY_TOOLBOX_READY")},this.getToolbox=function(){return document.getElementById(":0")},this.getToolboxPosition=function(){return{x:this.getToolbox().clientLeft,y:this.getToolbox().clientTop}},this.getToolboxBounds=function(){return{width:this.getToolbox().clientWidth,height:this.getToolbox().clientHeight}}}]).service("BlocklyToolbox",["Blockly","BlocklyService","lodash",,function(Blockly,BlocklyService,lodash){this.toolbox={xml:{_id:"toolbox",_style:"display: none",category:[]}};var x2js=new X2JS;this.addCategory=function(name,id){var idx=this.toolbox.xml.category.push({block:[],_id:id,_name:name});return this.toolbox.xml.category[idx]},this.getCategory=function(name){try{return lodash.find(this.toolbox.xml.category,function(cat){return cat._name==name})}catch(err){return null}},this.addBlock=function(category,name,definition,generator){angular.isDefined(definition)&&(Blockly.Blocks[name]=definition),this.getCategory(name).block.push({_type:name}),angular.isDefined(generator)&&(Blockly.Javascript[name]=generator)},this.apply=function(){BlocklyService.setToolbox(x2js.json2xml_str(this.toolbox))}}]).directive("ngBlockly",["ngBlockly","Blockly","BlocklyService","BlocklyToolbox","$timeout","$document",function(ngBlockly,Blockly,BlocklyService,BlocklyToolbox,$timeout,$document){return{restrict:"E",scope:{options:"="},template:'<div style="height:500px" class="ng-blockly"></div>',controller:[function(){}],link:function($scope,$element,attrs){var opts=angular.extend({},$scope.options||{},ngBlockly.getOptions());console.dir(opts),$element.ready(function(){console.log("ready"),$timeout(function(){Blockly.inject($element.children()[0],opts),BlocklyToolbox.apply()},100)})}}}]).directive("ngBlocklyToolboxButton",["$compile","BlocklyService",function($compile,BlocklyService){function validateFileExtension(fileName){var exp=/^.*\.(jpg|jpeg|gif|JPG|png|PNG)$/;return exp.test(fileName)}return{restrict:"E",replace:!0,require:["ngModel"],scope:{iconShow:"@",iconOverShow:"@",iconDownShow:"@",iconHide:"@",iconOverHide:"@",iconDownHide:"@",onShow:"&",onHide:"&",ngModel:"="},controller:["$scope","$rootScope",function($scope,$rootScope){$scope.icon=$scope.iconShow,$scope.ngModel=!0,$scope.toggleLeave=function(){$scope.iconMode&&($scope.icon=$scope.ngModel?$scope.iconHide:$scope.iconShow)},$scope.iconOver=function(){angular.isDefined($scope.iconOverShow)&&angular.isDefined($scope.iconOverHide)&&($scope.icon=$scope.ngModel?$scope.iconOverHide:$scope.iconOverShow)},$scope.iconDown=function(){angular.isDefined($scope.iconDownShow)&&angular.isDefined($scope.iconDownHide)&&($scope.icon=$scope.ngModel?$scope.iconDownHide:$scope.iconDownShow)},$scope.$watch("ngModel",function(newValue){newValue?$scope.onShow():$scope.onHide(),$scope.toggleLeave()}),$rootScope.$on("BLOCKLY_TOOLBOX_READY",function(){console.dir(BlocklyService.getToolboxBounds().width),$scope.bounds=BlocklyService.getToolboxBounds(),$scope.position=BlocklyService.getToolboxPosition(),console.dir($scope.position)})}],link:function($scope,$element,attrs){$scope.iconMode=!1,$scope.bounds={width:0,height:0},$scope.position={left:0,top:0};var template=angular.element('<a id="button_toggle_toolbox"  ng-click="ngModel=!ngModel" style="width:{{bounds.width}}px;left:{{position.left}}px"><ng-slide target="blocklyToolboxDiv" ng-model="ngModel"></ng-slide></a>');if(validateFileExtension($scope.iconShow)&&validateFileExtension($scope.iconHide)){$scope.iconMode=!0,console.dir($scope.icon);var icon=angular.element('<img ng-src="{{icon}}" ></img>');template.attr("ng-mouseover","iconOver()"),template.attr("ng-mouseleave","toggleLeave()"),template.attr("ng-mousedown","iconDown();"),template.append(icon)}else{$scope.iconMode=!1;var icon_=angular.element('<i id="button_toggle_toolbox_icon" ng-class="{ iconShow:ngModel, iconHide:!ngModel}"></i>');template.append(icon_)}$element=$element.replaceWith($compile(template)($scope)),console.dir($element.html())}}}]).directive("ngSlide",["BlocklyService","$rootScope",function(BlocklyService,$rootScope){return{restrict:"E",scope:{target:"@",ngModel:"="},link:function($scope,$element,attrs,controllers){function update(){angular.isDefined(elt)&&($scope.ngModel?(elt.removeClass("toolbox_toggle_off"),elt.addClass("toolbox_toggle_on")):(elt.removeClass("toolbox_toggle_on"),elt.addClass("toolbox_toggle_off")))}console.dir($scope.ngModel);var elt=void 0;$rootScope.$on("BLOCKLY_TOOLBOX_READY",function(){elt=document.getElementsByClassName($scope.target)[0],elt=angular.element(elt),update()}),$scope.$watch("ngModel",function(){update()})}}}]).directive("ngVerticalSlide",["$timeout",function($timeout){var getTemplate,link;return getTemplate=function(tElement,tAttrs){return void 0!==tAttrs.lazyRender?"<div ng-if='lazyRender' ng-transclude></div>":"<div ng-transclude></div>"},link=function(scope,element,attrs,ctrl,transclude){var closePromise,duration,elementScope,emitOnClose,getHeight,hide,lazyRender,onClose,show;return duration=attrs.duration||1,elementScope=element.scope(),emitOnClose=attrs.emitOnClose,onClose=attrs.onClose,lazyRender=void 0!==attrs.lazyRender,lazyRender&&(scope.lazyRender=scope.expanded),closePromise=null,element.css({overflow:"hidden",transitionProperty:"height",transitionDuration:""+duration+"s",transitionTimingFunction:"ease-in-out"}),getHeight=function(passedScope){var c,children,height,_i,_len;for(height=0,children=element.children(),_i=0,_len=children.length;_len>_i;_i++)c=children[_i],height+=c.clientHeight;return""+height+"px"},show=function(){return closePromise&&$timeout.cancel(closePromise),lazyRender&&(scope.lazyRender=!0),element.css("height",getHeight())},hide=function(){return element.css("height","0px"),emitOnClose||onClose||lazyRender?closePromise=$timeout(function(){return emitOnClose&&scope.$emit(emitOnClose,{}),onClose&&elementScope.$eval(onClose),lazyRender?scope.lazyRender=!1:void 0},1e3*duration):void 0},scope.$watch("expanded",function(value,oldValue){return $timeout(value?show:hide)}),scope.$watch(getHeight,function(value,oldValue){return scope.expanded&&value!==oldValue?$timeout(show):void 0})},{restrict:"A",scope:{expanded:"=ngSlideDown"},transclude:!0,link:link,template:function(tElement,tAttrs){return getTemplate(tElement,tAttrs)}}}]).constant("Blockly",Blockly).constant("EmptyToolbox",function(){var toolboxXml=["<xml >",'<category id="catLogic" name="Empty">',"</category>","</xml>"];return toolboxXml.join("")}).constant("LogicToolbox",function(){var toolboxXml=["<xml >",'<category id="catLogic" name="Logic">','<block type="controls_if">',"</block>","</category>","</xml>"];return toolboxXml.join("")})}(angular,Blockly,X2JS);